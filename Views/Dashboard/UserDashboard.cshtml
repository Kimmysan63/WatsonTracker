@model WatsonTracker.ViewModels.DashboardVM
@using WatsonTracker.Helper
@{ var helper = new UserRolesHelper();
    var projectHelper = new ProjectsHelper();
}



<h2>User Defined Dashboard</h2>

<div class="white-box">
    <div class="row">
        <h3 class="box-title">User Action Popouts</h3>

        <!-- /.modal1 -->
        @if (User.IsInRole("Admin"))
        {
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#assignRole"> Assign User Role</button>
            <div id="assignRole" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header bg-primary text-white">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                            <h4 class="modal-title text-white">Assign User To Role</h4>
                        </div>
                        <div class="modal-body">
                            @using (Html.BeginForm("AssignUserRoleDB", "Roles", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                <div class="form-horizontal">
                                    <h4></h4>
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        @Html.Label("User List", htmlAttributes: new { @class = "control-label col-md-2 bg-primary" })
                                        <div class="col-md-10">
                                            @Html.DropDownListFor(m => m.UserId, null, "--Select--", htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.Label("Role List", htmlAttributes: new { @class = "control-label col-md-2 bg-primary" })
                                        <div class="col-md-10">
                                            @Html.DropDownListFor(m => m.RoleName, null, "--Select--", htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.RoleName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Submit" class="btn btn-warning" />
                                        </div>
                                    </div>
                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>
        }

        <!--/.modal2-->
        @if (User.IsInRole("Admin") || User.IsInRole("ProjectManager"))
        {
            <button type="button" class="btn btn-success" data-toggle="modal" data-target="#createProject"> Create Project</button>
            <div id="createProject" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header bg-success text-white">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                            <h4 class="modal-title text-white">Create Project</h4>
                        </div>
                        <div class="modal-body">

                            @using (Html.BeginForm("CreateDB", "Projects", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2 bg-success" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.PMName, htmlAttributes: new { @class = "control-label col-md-2 bg-success" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("ProjectManagerId", null, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.PMName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Create" class="btn btn-primary" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                    </div>
                </div>
            </div>
        }
        <!--/.modal3-->
        @if (User.IsInRole("Admin") || User.IsInRole("ProjectManager"))
        {
            <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#userToProject"> Assign User to Proj</button>
            <div id="userToProject" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header bg-warning text-white">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                            <h4 class="modal-title text-white">Assign User to Project</h4>
                        </div>
                        <div class="modal-body">

                            @using (Html.BeginForm("AssignUserToProjectDB", "Projects", FormMethod.Post))
                            {


                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    <h4></h4>
                                    <hr />


                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        @Html.Label("User List", htmlAttributes: new { @class = "control-label col-md-2 bg-warning" })
                                        <div class="col-md-10">
                                            @Html.DropDownListFor(m => m.UserId, null, htmlAttributes: new { @class = "form-control" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.Label("Project List", htmlAttributes: new { @class = "control-label col-md-2 bg-warning" })
                                        <div class="col-md-10">
                                            @Html.DropDownListFor(m => m.ProjectId, null, htmlAttributes: new { @class = "form-control" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Submit" class="btn btn-info" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

        <!--/.modal4-->
        @if (User.IsInRole("Submitter"))
        {
            <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#createTicket"> Create Tickets</button>
            <div id="createTicket" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header bg-danger text-white">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                            <h4 class="modal-title text-white">Create Ticket</h4>
                        </div>
                        <div class="modal-body">

                            @using (Html.BeginForm("CreateTicDB", "Tickets", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2 bg-danger" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2 bg-danger" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ProjectId, "ProjectID", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("ProjectID", Model.ProjectId, "--Select--", htmlAttributes: new { @class = "form-control" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TicketTypeId, "TicketTypeId", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("TicketTypeId", Model.TicketTypeId, "--Select--", htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.TicketTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Create" class="btn btn-success" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <!--end of button modals-->
    @foreach (var project in Model.NumProjects)
    {
        //Project Description Box
        <div class="row">
            <div class="col-md-3">
                <div class="white-box" style="height:450px;">
                    <h4 class="box-title">Proj Name: @project.Name</h4>
                    <div class="task-widget t-a-c">
                        <div class="task-content font-16 t-a-c">
                            <div class="col-sm-12 ">
                                PM Name: @project.PMName
                            </div>
                        </div>
                        <div class="task-assign font-16">
                            <ul class="list-inline">
                                <div class="text-dark">Project Users:</div>
                                @foreach (var user in projectHelper.UsersOnProject(project.Id))
                                {
                                    <li class="p-l-0">
                                        <p>
                                            @user.FullName -
                                            @foreach (var role in helper.ListUserRoles(user.Id))
                                            {
                                                <span class="text-blue">@role</span>
                                            }
                                        </p>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!--Ticket Priorities-->
            <div class="col-md-3">
                <div class="white-box">
                    <h3 class="box-title">Ticket Priorities</h3>
                    <div id="morris-bar-chart-@project.Id"></div>
                </div>
            </div>
            <!--Ticket Type-->
            <div class="col-md-3">
                <div class="white-box order-chart-widget" style="height:450px;">
                    <h4 class="box-title">Ticket Type</h4>
                    <div id="order-status-chart-@project.Id" style="height: 200px;">
                        <ul class="list-inline m-b-0 m-t-20 t-a-c">
                            <li>
                                <h6 class="font-15"><i class="fa fa-circle m-r-5 text-primary"></i>Task</h6>
                            </li>
                            <li>
                                <h6 class="font-15"><i class="fa fa-circle m-r-5 text-danger"></i>Prod Fix</h6>
                            </li>
                            <li>
                                <h6 class="font-15"><i class="fa fa-circle m-r-5 text-success"></i>Software Update</h6>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <!--Ticket Status-->
            <div class="col-md-3">
                <div class="white-box" style="height:450px;">
                    <h3 class="box-title">Ticket Status</h3>
                    <div id="sparkline-@project.Id" class="text-center">
                        <canvas style="display: inline-block" vertical-align: top, width="200" height="200"></canvas>
                    </div>
                    <ul class="list-inline m-b-0 m-t-20 t-a-c">
                        <li>
                            <h6 class="font-15"><i class="fa fa-square m-r-5 text-primary"></i>New</h6>
                        </li>
                        <li>
                            <h6 class="font-15"><i class="fa fa-square m-r-5 text-danger"></i>In development</h6>
                        </li>
                        <li>
                            <h6 class="font-15"><i class="fa fa-square m-r-5 text-success"></i>Complete</h6>
                        </li>
                    </ul>
                </div>

            </div>
        </div>
    }
</div>
<!--User Defined Ticket List-->
<div class="row">
    <div class="col-sm-12">
        <div class="white-box">
            <h3 class="box-title">User Defined Tickets Table</h3>
            <div class="table-responsive ">
                <table class="table color-table info-table table-striped">
                    <thead>
                        <tr>
                            <th>
                                Assigned To
                            </th>
                            <th>
                                Owner
                            </th>
                            <th>
                                Project Name
                            </th>
                            <th>
                                Priority
                            </th>
                            <th>
                                Status
                            </th>
                            <th>
                                Type
                            </th>
                            <th>
                                Title
                            </th>
                            <th>
                                Description
                            </th>
                            <th>
                                Created
                            </th>
                            <th>
                                Updated
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in Model.MyTickets)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.AssignedToUser.FirstName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.OwnerUser.FirstName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Project.Name)
                                </td>
                                @if (item.TicketPriority.Name == "Urgent")
                                {
                                    <td>
                                        <span class="priorityUrgent">
                                            @Html.DisplayFor(model => item.TicketPriority.Name)
                                        </span>
                                    </td>
                                }
                                else
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TicketPriority.Name)
                                    </td>
                                }
                                <td>
                                    @Html.DisplayFor(modelItem => item.TicketStatus.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.TicketType.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Title)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Description)
                                </td>
                                <td>
                                    @item.Created.ToString("MM.dd.yyyy")
                                </td>

                                @if (item.Updated != null)
                                {
                                    <td>
                                        @item.Updated.Value.Date.ToString("MM.dd.yyyy")
                                    </td>
                                }
                                else
                                {
                                    <td></td>
                                }

                                <td>
                                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "btn btn-outline btn-primary btn-sm btn-block" })
                                    @Html.ActionLink("Details", "Details", new { id = item.Id }, new { @class = "btn btn-outline btn-success btn-sm" })
                                    @if (User.IsInRole("Admin") || User.IsInRole("ProjectManager"))
                                    {
                                        @Html.ActionLink("Assign", "AssignTicket", new { id = item.Id }, new { @class = "btn btn-outline btn-danger btn-sm" })
                                    }
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>

                @if (User.IsInRole("Developer") && Model.AssignedTickets.Count() != 0)
                {
                    <h2>Ticket Assigned Index</h2>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>
                                    Assigned To
                                </th>
                                <th>
                                    Owner
                                </th>
                                <th>
                                    Project Name
                                </th>
                                <th>
                                    Priority
                                </th>
                                <th>
                                    Status
                                </th>
                                <th>
                                    Type
                                </th>
                                <th>
                                    Title
                                </th>
                                <th>
                                    Description
                                </th>
                                <th>
                                    Created
                                </th>
                                <th>
                                    Updated
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>


                            @foreach (var item in Model.AssignedTickets)
                            {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.AssignedToUser.FirstName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.OwnerUser.FirstName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Project.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.TicketPriority.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.TicketStatus.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.TicketType.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Title)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Description)
                                </td>
                                <td>
                                    @item.Created.ToString("MM.dd.yyyy")
                                </td>
                                @if (item.Updated != null)
                                {
                                    <td>
                                        @item.Updated.Value.Date.ToString("MM.dd.yyyy")
                                    </td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                <td>
                                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "btn btn-outline btn-primary btn-sm btn-block" })
                                    @Html.ActionLink("Details", "Details", new { id = item.Id }, new { @class = "btn btn-outline btn-success btn-sm btn-block" })
                                    @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "btn btn-outline btn-danger btn-sm btn-block" })
                                </td>
                            </tr>
                            }

                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>




@section scripts{
    @foreach (var project in Model.NumProjects)
    {
        //Ticket Types
        <script>
        Morris.Donut({
            element: 'order-status-chart-@project.Id',
            data: [{
                label: "Project Tasks",
                value: @project.Tickets.Count(t => t.TicketType.Name == "Project Task")

            }, {
                label: "Production Fix",
                value: @project.Tickets.Count(t => t.TicketType.Name == "Production Fix")
            }, {
                label: "Software",
                value: @project.Tickets.Count(t => t.TicketType.Name == "Software Update")
            }],
            resize: true,
            colors: ['#0283cc', '#e74a25', '#2ecc71']
        });
            //Ticket Priorities
        Morris.Bar({
                    element: 'morris-bar-chart-@project.Id',
                    data: [{
                        y: "@project.Name",
                        Urgent: @project.Tickets.Count(t => t.TicketPriority.Name == "Urgent"),
                        High: @project.Tickets.Count(t => t.TicketPriority.Name == "High"),
                        Medium: @project.Tickets.Count(t => t.TicketPriority.Name == "Medium"),
                        Low: @project.Tickets.Count(t => t.TicketPriority.Name == "Low")
                        }
                    ],
                    xkey: 'y',
                    ykeys: ['Urgent', 'High', 'Medium', 'Low'],
                    labels: ['Urgent', 'High', 'Medium', 'Low'],
                    barColors: ['red', 'orange', 'blue', 'green'],
                    hideHover: 'auto',
                    gridLineColor: '#e0e0e0',
                    resize: false,
                    numLines: 3
                });
            //Ticket Status
        $(document).ready(function () {
            var sparklineLogin = function () {

                $('#sparkline-@project.Id').sparkline([@project.Tickets.Count(t => t.TicketStatus.Name == "New"), @project.Tickets.Count(t => t.TicketStatus.Name == "In Development"), @project.Tickets.Count(t => t.TicketStatus.Name == "Completed")], {
                    type: 'pie',
                    height: '200',
                    resize: true,
                    sliceColors: ['#00bbd9', '#e74a25', '#2ecc71'],
                    tooltipFormat: '{{offset:offset}} {{value}}',
                    tooltipValueLookups: {
                        'offset': {
                            0: 'New',
                            1: 'In Development',
                            2: 'Complete'
                        }
                    }
                });

            }
            var sparkResize;

            $(window).resize(function (e) {
                clearTimeout(sparkResize);
                sparkResize = setTimeout(sparklineLogin, 500);
            });
            sparklineLogin();
        });

        </script>
    }

}
